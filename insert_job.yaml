---
apiVersion: batch/v1
kind: Job
metadata:
  name: patroni-insert-test
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: insert-data
        image: postgres:16
        command: ["/bin/bash", "-c"]
        args:
          - |
            set -euo pipefail

            HOST="patronidemo-primary"
            PORT="5432"
            DB="postgres"
            USER="postgres"

            echo "[$(date)] Waiting for PostgreSQL on $HOST:$PORT ..."
            until pg_isready -h "$HOST" -p "$PORT" -U "$USER" -d "$DB" -t 2; do
              sleep 2
            done
            echo "[$(date)] PostgreSQL is ready!"

            # Create test table
            psql "host=$HOST port=$PORT user=$USER dbname=$DB" <<'SQL'
            CREATE TABLE IF NOT EXISTS test_data (
              id SERIAL PRIMARY KEY,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              data TEXT,
              random_number INTEGER
            );
            CREATE INDEX IF NOT EXISTS idx_test_data_created_at ON test_data(created_at);
            SQL

            echo "[$(date)] Table created. Starting continuous insert..."

            # Continuous insert loop
            COUNTER=0
            while true; do
              START_TIME=$(date +%s%N)

              # Insert 100 rows in a single transaction
              psql "host=$HOST port=$PORT user=$USER dbname=$DB" -c "
                BEGIN;
                INSERT INTO test_data (data, random_number)
                SELECT
                  'Test data ' || i || ' - ' || md5(random()::text),
                  (random() * 1000000)::INTEGER
                FROM generate_series(1, 100) AS i;
                COMMIT;
              "

              COUNTER=$((COUNTER + 100))
              END_TIME=$(date +%s%N)
              ELAPSED=$((($END_TIME - $START_TIME) / 1000000))

              if [ $((COUNTER % 1000)) -eq 0 ]; then
                TOTAL_ROWS=$(psql -t "host=$HOST port=$PORT user=$USER dbname=$DB" -c "SELECT COUNT(*) FROM test_data;")
                echo "[$(date)] Inserted $COUNTER rows (Total: $TOTAL_ROWS rows) - Last batch took ${ELAPSED}ms"
              fi

              # Sleep to maintain roughly 100 inserts per second
              if [ $ELAPSED -lt 1000 ]; then
                sleep_ms=$((1000 - ELAPSED))
                sleep 0.$(printf "%03d" $((1000 - ELAPSED)))
              fi
            done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: patronidemo
              key: superuser-password
