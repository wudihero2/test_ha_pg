---
apiVersion: v1
kind: ConfigMap
metadata:
  name: barman-config
data:
  barman.conf: |
    [barman]
    barman_user = barman
    configuration_files_directory = /etc/barman/barman.d
    barman_home = /var/lib/barman
    log_level = INFO
    compression = zstd

  patronidemo.conf: |
    [patronidemo]
    description = "Patroni Demo Cluster Backup"
    conninfo = host=patronidemo-primary port=5432 user=postgres dbname=postgres passfile='/home/postgres/.pgpass'
    backup_method = postgres
    streaming_conninfo = host=patronidemo-primary port=5432 user=standby dbname=postgres passfile='/home/postgres/.pgpass'
    slot_name = barman
    create_slot = auto
    streaming_archiver = on
    post_backup_retry_script = barman-cloud-backup --endpoint-url ${AWS_ENDPOINT_URL} s3://barman-backups patronidemo
    pre_archive_retry_script = barman-cloud-wal-archive --endpoint-url ${AWS_ENDPOINT_URL} s3://barman-backups patronidemo

---
apiVersion: v1
kind: Secret
metadata:
  name: barman-pgpass
type: Opaque
stringData:
  .pgpass: |
    patronidemo-primary:5432:*:postgres:zalando
    patronidemo-primary:5432:*:standby:rep-pass

---
apiVersion: v1
kind: Secret
metadata:
  name: barman-s3-credentials
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: minioadmin
  AWS_SECRET_ACCESS_KEY: minioadmin123
  AWS_ENDPOINT_URL: http://minio:9000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: barman-data
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: barman
  labels:
    app: barman
spec:
  replicas: 1
  selector:
    matchLabels:
      app: barman
  template:
    metadata:
      labels:
        app: barman
    spec:
      initContainers:
      - name: fix-pgpass-permissions
        image: barman:test
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
          - |
            cp /tmp/pgpass-secret/.pgpass /home/postgres/.pgpass
            chmod 0600 /home/postgres/.pgpass
            ls -la /home/postgres/.pgpass
            echo "pgpass permissions fixed"
        volumeMounts:
        - name: barman-pgpass-secret
          mountPath: /tmp/pgpass-secret
        - name: barman-pgpass-workdir
          mountPath: /home/postgres
      containers:
      - name: barman
        image: barman:test
        imagePullPolicy: IfNotPresent
        command: ["sleep", "infinity"]
        volumeMounts:
        - name: barman-data
          mountPath: /var/lib/barman
        - name: barman-config
          mountPath: /etc/barman.conf
          subPath: barman.conf
        - name: barman-config
          mountPath: /etc/barman/barman.d/patronidemo.conf
          subPath: patronidemo.conf
        - name: barman-pgpass-workdir
          mountPath: /home/postgres
        - name: barman-log
          mountPath: /var/log/barman
        env:
        - name: PGPASSFILE
          value: /home/postgres/.pgpass
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: barman-s3-credentials
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: barman-s3-credentials
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              name: barman-s3-credentials
              key: AWS_ENDPOINT_URL
      volumes:
      - name: barman-data
        persistentVolumeClaim:
          claimName: barman-data
      - name: barman-config
        configMap:
          name: barman-config
      - name: barman-pgpass-secret
        secret:
          secretName: barman-pgpass
      - name: barman-pgpass-workdir
        emptyDir: {}
      - name: barman-log
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: barman
  labels:
    app: barman
spec:
  type: ClusterIP
  selector:
    app: barman
  ports:
  - name: ssh
    port: 22
    targetPort: 22
